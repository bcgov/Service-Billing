@model Service_Billing.Models.ClientAccount
@{
    ViewData["Title"] = "Client Details";
    Layout = "_Layout";
    var parms = new Dictionary<string, string>
{
{ "clientNumber", Model.ClientNumber.ToString() }
};
}
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IAuthorizationService AuthorizationService
@{
    var user = User as ClaimsPrincipal;
    var isMinistryClient = user?.IsMinistryClient(AuthorizationService) ?? false;
    var isNew = (ViewData["isNew"] != null && (bool?)ViewData["isNew"] == true) ? "true" : "false";
    var isEdited = (ViewData["isEdited"] != null && (bool?)ViewData["isEdited"] == true) ? "true" : "false";
}
<h1>Client Account Information</h1>
<div>
    <h4>@Model.Id-@Model.Name</h4>
    <hr />
    <table style="empty-cells: show;">
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.Name)
            </td>
            <td>
                @Html.DisplayFor(model => Model.Name)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.ClientNumber)
            </td>
            <td>
                @Html.DisplayFor(model => Model.ClientNumber)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.ResponsibilityCentre)
            </td>
            <td>
                @Html.DisplayFor(model => Model.ResponsibilityCentre)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.ServiceLine)
            </td>
            <td>
                @String.Format("{0:00000}", Model.ServiceLine)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.STOB)
            </td>
            <td>
                @String.Format("{0:0000}", Model.STOB)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.Project)
            </td>
            <td>
                @Html.DisplayFor(model => Model.Project)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.ExpenseAuthorityName)
            </td>
            <td>
                @Html.DisplayFor(model => Model.ExpenseAuthorityName)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.ServicesEnabled)
            </td>
            <td>
                @if (String.IsNullOrEmpty(Model.ServicesEnabled))
                {
                    <br />
                }
                else
                {
                    @Html.DisplayFor(model => Model.ServicesEnabled)
                }
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.IsApprovedByEA)
            </td>
            <td>
                @Html.DisplayFor(model => Model.IsApprovedByEA)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => Model.Notes)
            </td>
            <td>
                @Html.DisplayFor(model => Model.Notes)
            </td>
        </tr>
        <!-- For the life of me, I cannot figure out how else to get any break between these rows-->
        <tr><td></td></tr><tr><td></td></tr><tr><td></td></tr>
          
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => model.FinancialContact)
            </td>
            <td>
                @Html.DisplayFor(model => model.FinancialContact)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => model.PrimaryContact)
            </td>
            <td>
                @Html.DisplayFor(model => model.PrimaryContact)
            </td>
        </tr>
        <tr>
            <td class="table-left">
                @Html.DisplayNameFor(model => model.Approver)
            </td>
            <td>
                @Html.DisplayFor(model => model.Approver)
            </td>
        </tr>
    </table>


    @if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded && Model.IsActive && !isMinistryClient)
    {
        <input type="submit" value="Deactivate This Client" id="deactivate-client" class="btn btn-default" onclick="confirmDeactivateClient(@Model.Id)" />
    }
    else if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded)
    {
        <input type="submit" value="Reactivate" class="btn btn-default" onclick="confirmReactivateClient(@Model.Id)" />
    }
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Service Category</th>
                <th scope="col">Amount</th>
                <th scope="col">Start Date</th>
                <th scope="col">End Date</th>
                <th scope="col">Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Bill charge in Model.Bills)
            {
                @if (charge.IsActive)
                {
                    <tr>
                        <td>@charge.Title</td>
                        <td>@charge.ServiceCategory.Name</td>
                        <td>@String.Format("${0:.##}", charge.Amount)</td>
                        @if(charge.StartDate.HasValue)
                        {  
                            <td>@charge.StartDate.Value.ToString("MM/dd/yyyy")</td>
                        }
                        else
                        {
                            <td/>
                        }
                        @if (charge.EndDate == null)
                        {
                            if (User.IsInRole("GDXBillingService.User"))
                            {
                                <td></td>
                            }
                            else
                            {  
                              <td><a asp-action="Edit" asp-controller="Bills" asp-route-id="@charge.Id">Provide end date?</a></td>
                            }
                        }
                        else
                        {
                            <td>@charge.EndDate.Value.ToString("MM/dd/yyyy")</td>
                        }
                        <td><a asp-action="Details" asp-controller="Bills" asp-route-id="@charge.Id">see this charge</a></td>
                        @if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded && !isMinistryClient)
                        {
                            <td><input type="submit" value="Deactivate" class="btn btn-default" onclick="confirmInactive(@charge.Id)" /></td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (Model.Bills.FirstOrDefault(x => !x.IsActive) != null)
    {
        <h4>Inactive Charges</h4>
        <p>These are old or cancelled charges, and are not factored into quarterly reporting.</p>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Title</th>
                    <th scope="col">Service Category</th>
                    <th scope="col">Amount</th>
                    <th scope="col">Start Date</th>
                    <th scope="col">End Date</th>
                    <th scope="col">Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Bill charge in Model.Bills)
                {
                    if (charge.IsActive)
                        continue;
                    <tr>
                        <td>@charge.Title</td>
                        <td>@charge.ServiceCategory.Name</td>
                        <td>@String.Format("${0:.##}", charge.Amount)</td>
                        @if (charge.StartDate.HasValue)
                        {
                            <td>@charge.StartDate.Value.ToString("MM/dd/yyyy")</td>
                        }
                        else
                        {
                            <td />
                        }
                        @if (charge.EndDate == null)
                        {
                            <td><a asp-action="Edit" asp-controller="Bills" asp-route-id="@charge.Id">Provide end date?</a></td>
                        }
                        else
                        {
                            <td>@charge.EndDate.Value.ToString("MM/dd/yyyy")</td>
                        }
                        <td><a asp-action="Details" asp-controller="Bills" asp-route-id="@charge.Id">see this charge</a></td>
                        @if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded && Model.IsActive)
                        {
                            <td><input type="submit" value="Reactivate" class="btn btn-default" onclick="confirmReactivateCharge(@charge.Id)" /></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@if ((await AuthorizationService.AuthorizeAsync(User, "RequireFinancialOfficerRole")).Succeeded)
{
    <div class="bottom-nav">
        <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
        @if (!isMinistryClient)
        {
            <a href="/Bills/AddServiceBilling?accountId=@Model?.Id">Order a Service</a>
        }
    </div>
    <div id="dialog" title="Set this charge to Inactive?">
        <p>Inactive charges are not factored into quarterly reports, and deactivated fixed services are not carried to future billing cycles.</p>
    </div>
    <div id="reactivate-charge-dialog" title="Reactivate this charge?">
        <p>This charge will be made active. It will be counted in quarterly reporting, and included in future billing cycles if appropriate.</p>
    </div>
    <div id="deactivate-client-dialog" title="Whoa, Really?">
        <p>This client will be set to inactive, and as well all its associated charges.</p>
    </div>
    <div id="reactivate-client-dialog" title="Reactivate Client?">
        <p>This client will be set to active, and can be billed for new charges.</p>
        <p>Any charges associated with this client that were set to inactive can be reactivated from the list of inactive charges below.</p>
    </div>
}
@section Scripts
{
    <script>
        $(function () {
            $("#dialog").dialog({
                resizable: false,
                height: "auto",
                width: 400,
                autoOpen: false,
                buttons: {
                    "Set Inactive": function () {
                        $(this).dialog("close");
                        setIsActiveForCharge($(this).dialog("option", "id"), false);
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        });
        const confirmInactive = ((val) => {
            $("#dialog").dialog("option", "id", val);
            $("#dialog").dialog("open");
        });

        const setIsActiveForCharge = ((id, active) => {
            var url = "../../Bills/SetIsActiveForCharge?id=" + id + "&active=" + active;
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {

                    window.location.reload();
                }
            };
            xhr.open('post', url);
            xhr.send();
        });

        $(function () {
            $("#reactivate-charge-dialog").dialog({
                resizable: false,
                height: "auto",
                width: 400,
                autoOpen: false,
                buttons: {
                    "Reactivate": function () {
                        $(this).dialog("close");
                        setIsActiveForCharge($(this).dialog("option", "id"), true);
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        });
        const confirmReactivateCharge = ((val) => {
            $("#reactivate-charge-dialog").dialog("option", "id", val);
            $("#reactivate-charge-dialog").dialog("open");
        });
        $(function () {
            $("#reactivate-client-dialog").dialog({
                resizable: false,
                height: "auto",
                width: 400,
                autoOpen: false,
                buttons: {
                    "Reactivate": function () {
                        $(this).dialog("close");
                        setIsActiveForClient($(this).dialog("option", "id"), true);
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        });
        $(function () {
            $("#deactivate-client-dialog").dialog({
                resizable: false,
                height: "auto",
                width: 400,
                autoOpen: false,
                buttons: {
                    "Deactivate Client": function () {
                        $(this).dialog("close");
                        setIsActiveForClient($(this).dialog("option", "id"), false);
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        });

        const confirmReactivateClient = ((val) => {
            $("#reactivate-client-dialog").dialog("option", "id", val);
            $("#reactivate-client-dialog").dialog("open");
        });
        const confirmDeactivateClient = ((val) => {
            $("#deactivate-client-dialog").dialog("option", "id", val);
            $("#deactivate-client-dialog").dialog("open");
        });

        const setIsActiveForClient = ((id, active) => {
            var url = "../../ClientAccount/SetIsActiveForClient?id=" + id + "&active=" + active;
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {

                    window.location.reload();
                }
            };
            xhr.open('post', url);
            xhr.send();
        });
        // $(document).ready(() => {
        //    if (@isNew) {
        //         $("#toast-title-text").html("Created Account");
        //         $("#toast-header-small-text").html("New Account created");
        //         $("#toast-body").html(`Your new Client Account, ${"@Model.Name"} was created, and entered in the database`);
        //         $("#toast-links").html(`<a href="/Bills/AddServiceBilling?accountId=${"@Model.Id"}">Add Services</a>`);
        //         $("#info-toast").toast("show");
        //    }
        //     if (@isEdited) {
        //         $("#toast-title-text").html("Service Updated");
        //         $("#toast-header-small-text").html(`${"@Model.Name"}`);
        //         $("#toast-body").html(`Client Account <i>${"@Model.Name"}</i> has been successfully updated`);
        //         $("#info-toast").toast("show");
        //     }
        // });
    </script>
}
