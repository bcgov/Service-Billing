@model Service_Billing.Models.ClientAccount

@{
    ViewData["Title"] = "Edit Client Account";
    Layout = "_Layout";
}
@{

  IEnumerable<Ministry>? organizations = ViewData["Organizations"] as IEnumerable<Ministry>;
  int i = 0; // for contact indices

}

<h1>Edit</h1>

<h4>ClientAccount</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" id="editForm">
            <div asp-validation-summary="All" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="@Model.Name" class="control-label"></label>
                <input asp-for="@Model.Name" class="form-control" value="@Model.Name"/>
                <span asp-validation-for="@Model.Name" class="text-danger"></span>
                <a onclick="openDialog()">Change Ministry or Organization?</a>
            </div>
            <div class="form-group">
                <label asp-for="@Model.ClientNumber" class="control-label"></label>
                <input asp-for="@Model.ClientNumber" class="form-control" value="@Model.ClientNumber" data-val="true" data-val-required="A CAS Client Number must be provided"/>
                <span asp-validation-for="@Model.ClientNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.ResponsibilityCentre" class="control-label"></label>
                <input asp-for="@Model.ResponsibilityCentre" class="form-control" value="@Model.ResponsibilityCentre" data-val="true" data-val-required="Please Provide a five character RC code"/>
                <span asp-validation-for="@Model.ResponsibilityCentre" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.ServiceLine" class="control-label"></label>
                <input asp-for="@Model.ServiceLine" class="form-control" value="@String.Format("{0:00000}", Model.ServiceLine)" maxlength="5" data-val="true" data-val-required="Please Provide a five character Service Line code" />
                <span asp-validation-for="@Model.ServiceLine" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.STOB" class="control-label"></label>
                <input asp-for="@Model.STOB" class="form-control" value="@String.Format("{0:0000}", Model.STOB)" maxlength="4" data-val-required="Please Provide a four character SToB number" />
                <span asp-validation-for="@Model.STOB" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Project" class="control-label"></label>
                <input asp-for="@Model.Project" class="form-control" value="@Model.Project" />
                <span asp-validation-for="@Model.Project" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.ExpenseAuthorityName" class="control-label"></label>
                <input asp-for="@Model.ExpenseAuthorityName" class="form-control contact-input" value="@Model.ExpenseAuthorityName" />
                <span asp-validation-for="@Model.ExpenseAuthorityName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Notes" class="control-label"></label>
                <textarea asp-for="@Model.Notes" class="form-control" value="@Model.Notes" > </textArea>
                <span asp-validation-for="@Model.Notes" class="text-danger"></span>

                <label asp-for="@Model.PrimaryContact" class="control-label">Primary Contact</label>
                <input asp-for="@Model.PrimaryContact" class="form-control" id="primaryContact" placeholder="start entering surname to search" />
       
                <span asp-validation-for="@Model.PrimaryContact" class="text-danger"></span>

                <label asp-for="@Model.Approver" class="control-label">Approvers</label>
                <input class="form-control" asp-for="@Model.Approver" id="approverContact" placeholder="start entering surname to search" />
         
                <span asp-validation-for="@Model.Approver" class="text-danger"></span>

                <label asp-for="@Model.FinancialContact" class="control-label">Financial Contacts</label>
                <input class="form-control" asp-for="@Model.FinancialContact" id="financialContact" placeholder="start entering surname to search" />
          
                <span asp-validation-for="@Model.FinancialContact" class="text-danger"></span>
              
                <label asp-for="@Model.IsApprovedByEA">EA Approved?</label>

                <input type="checkbox" asp-for="@Model.IsApprovedByEA" checked="@Model.IsApprovedByEA" />
                <span asp-validation-for="@Model.IsApprovedByEA" class="text-danger"></span>
               
                <div class="form-group">
                    <label asp-for="@Model.ServicesEnabled" class="control-label"></label>
                    <input asp-for="@Model.ServicesEnabled" class="form-control" value="@Model.ServicesEnabled" />
                    <span asp-validation-for="@Model.ServicesEnabled" class="text-danger"></span>
                </div>
                <input type="hidden" asp-for="@Model.Id" class="form-control" />
                <input  asp-for="@Model.OrganizationId" class="form-control" />

            </div>

            <label asp-for="@Model.Contacts" class="control-label">Primary Contacts</label>
            <div id="primary-contacts">
                   
            <!-- Handling contacts as one collection with different types was a real pain. Not sure I would do it again. -->
            @foreach(Contact? contact in Model.Contacts)
            {
              if(contact.ContactType == "primary")
              {  
                <div class="form-group">
                  <input asp-for="@contact.Person.DisplayName" name="displayNames" id="contact.Person.DisplayName" class="form-control contact-input" class="contactInput" placeholder="start entering surname to search" 
                    data-val="true"
                    data-val-required="Please provide a primary contact"/>
                  <input asp-for="@contact.ContactType" name="contactTypes" type="hidden" value="primary"/>
                  <input asp-for="@contact.PersonId" name="personIds" class="id-input" type="hidden" />
                  <input asp-for="@contact.Id" name="contactIds" type="hidden" class="contact-id" />
                  @if(contact != Model.PrimaryContacts.First())
                  {     
                    <a id="remove-contact" onclick="removeContactInput(event)">remove</a>
                  }
                </div>
              }
            }  
                
              <a id="add-primary" onclick="addContact('primary')">Add a second Primary Contact?</a>
              <div>
                <span asp-validation-for="@Model.PrimaryContact" class="text-danger"></span>
              </div>
            </div>

            <label asp-for="@Model.Contacts" class="control-label">Approvers</label>
                
            <div id="approver-contacts">
            @foreach(Contact contact in Model.Contacts)
            {
                if (contact.ContactType == "approver")
                {
                    <div class="form-group">
                        <input class="form-control contact-input" asp-for="@contact.Person.DisplayName" name="displayNames" id="contact_@i" placeholder="start entering surname to search"
                          data-val="true"
                      data-val-required="Please include at least one approver contact"/>
                    <input asp-for="@contact.ContactType" name="contactTypes" type="hidden" value="approver"/>
                    <input asp-for="@contact.PersonId" name="personIds" class="id-input" type="hidden" />
                    <input asp-for="@contact.Id" name="contactIds" class="contact-id" type="hidden" />
                    @if (contact != Model.ApproverContacts?.First())
                    {
                      <a id="remove-contact" onclick="removeContactInput(event)">remove</a>
                    }
                    </div> 
                }
              i++;
            }
              <a id="add-approver" onclick="addContact('approver')">Add an approver contact?</a>
              <div>
                <span asp-validation-for="@Model.Approver" class="text-danger"></span>
              </div>
            </div>

            <label asp-for="@Model.Contacts" class="control-label contact-input">Financial Contacts</label>
            <div id="financial-contacts">

            @foreach(Contact contact in Model.Contacts)
            {
              if(contact.ContactType == "financial")
              {
                  <div class="form-group">
                  <input class="form-control contact-input" asp-for="@contact.Person.DisplayName" name="displayNames" placeholder="start entering surname to search" 
                    data-val="true"
                      data-val-required="Please include at least one financial contact"/>
                  <input asp-for="@contact.ContactType" name="contactTypes" type="hidden" value="financial"/>
                  <input asp-for="@contact.PersonId" name="personIds" class="id-input" type="hidden" />
                  <input asp-for="@contact.Id" name="contactIds" type="hidden" class="contact-id" />
                  @if(contact != Model.FinancialContacts?.First())
                  {
                    <a id="remove-contact" onclick="removeContactInput(event)">remove</a>
                  }
                </div>
              }
            }

              <a id="add-financial" onclick="addContact('financial')">Add a financial contact?</a>
              <div>
                <span asp-validation-for="@Model.FinancialContact" class="text-danger"></span>
              </div>
            </div>
              
            <label asp-for="@Model.IsApprovedByEA">EA Approved?</label>

            <input type="checkbox" asp-for="@Model.IsApprovedByEA" checked="@Model.IsApprovedByEA" />
            <span asp-validation-for="@Model.IsApprovedByEA" class="text-danger"></span>
               
            <div class="form-group">
                <label asp-for="@Model.ServicesEnabled" class="control-label"></label>
                <input asp-for="@Model.ServicesEnabled" class="form-control" value="@Model.ServicesEnabled" />
                <span asp-validation-for="@Model.ServicesEnabled" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="@Model.Id" class="form-control" />
            <input type="hidden" asp-for="@Model.OrganizationId" class="form-control" />        
            <br />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>   
        </form>
    </div>
</div>
<div id="dialog" title="Change Ministry or Organization">
      <p>This will update the organization this account is under, and will update the name to reflect that.</p>
      <select asp-for="@organizations" class="form-control" id="orgSelect" >
        @if(organizations != null)
        {
          foreach(Ministry organization in organizations)
            {
                if (organization.Id == Model.OrganizationId)
                {
                    <option value="@organization.Id" selected>@organization.Acronym - @organization.Title</option>
                }
                else
                {
                    <option value="@organization.Id">@organization.Acronym - @organization.Title</option>
                }
            }
        }
      </select>            
      <input type="submit" value="Update" onclick="updateOrg()" class="btn btn-primary" />
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        var i = 0;
        const contactListUrl = window.location.origin + "/ClientAccount/SearchForContact";
        $(document).ready(function () {
            makeContactInputs();
          if(@Model.PrimaryContacts?.Count() > 1){
              $("#add-primary").hide();
          }
        });
             $("#dialog").dialog({
            resizable: false,
            height: "auto",
            width: 400,
            autoOpen: false
            });
        const updateOrg = (() =>
        {
          console.log('update');
          $('#OrganizationId').val($('#orgSelect').val());
          console.log($('#OrganizationId').val());
          console.log($('#Name').val());
          var url = "../../ClientAccount/UpdateNameOnOrgChange?orgId=" + $("#OrganizationId").val() +'&clientName=' + $('#Name').val();
          var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        var response = JSON.parse(xhr.response);
                        console.log(JSON.stringify(response));
                        $("#Name").val(response);
                        $("#dialog").dialog("close");
                    }
                };
                xhr.open('get', url);
                xhr.send();
        });
         const openDialog = (() => {
               $("#dialog").dialog("open");
            });


       const makeContactInputs = (() => {
          $(".contact-input").each(function () {
              $(this).autocomplete({
                source: contactListUrl,
                delay: 100
              });
            });
             $( ".contact-input" ).on( "autocompleteselect", function( event, ui ) {
            updateContactPerson(ui.item.label, event);
        } );
         $( ".contact-input" ).on( "change", function( event, ui ) {
           if(!ui){
             var inputGroup = $(event.target);
             inputGroup.siblings('.id-input').val(0);
           inputGroup.siblings('.contact-id').val(0);
           }
        } );
        });

       const updateContactPerson = ((displayName, e) => {
         var inputGroup = $(e.target);
        
          var url = `@Url.Action("GetAccountContact", "ClientAccount")` + `?displayName=${displayName}`;
          var xhr = new XMLHttpRequest();

          xhr.onreadystatechange = function () {
              if (this.readyState == 4 && this.status == 200) {
                  var data = JSON.parse(xhr.response);
                  var id = data.id;
                  var mail = data.mail;
                  // Use string selectors for siblings
                  inputGroup.siblings('.id-input').val(id);
              }
          };

          xhr.open('get', url);
          xhr.send();
      });

      const addContact = ((contactType) => {
          console.log(contactType);
          var html = `<div class="form-group">
                       <input asp-for="contact_Person_DisplayName" name="displayNames" class="form-control contact-input" class="contactInput" placeholder="start entering surname to search" />
                       <input asp-for="contact_Person_ContactType" name="contactTypes" type="hidden" value="${contactType}"/>
                       <input asp-for="contact_Person_PersonId" name="personIds" class="id-input" type="hidden"/>
                       <input asp-for="contact_Id" name="contactIds" class="contact-id-input" type="hidden" value="0"  />
                        <a id="remove-contact" onclick="removeContactInput(event)">remove</a>
                     </div>`;
           $(`#${contactType}-contacts`).append(html);
           if(contactType === 'primary'){
            $("#add-primary").hide();
           }
           else if(contactType === 'financial'){
            $("#add-financial").hide();
           }
          makeContactInputs();
      }); 

      const removeContactInput = ((e, contactType) => {
        e.target.parentElement.remove();
          if(contactType === 'primary'){
            $("#add-primary").show();
          }
          else if (contactType === 'financial'){
             $("#add-financial").show();
          }
      });

    </script>
}
