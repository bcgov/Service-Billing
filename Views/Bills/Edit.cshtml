
@model Service_Billing.ViewModels.EditChargeViewModel
@{
    ViewData["Title"] = "Edit a Charge";
    Layout = "_Layout";
}
@{
    string startDateString = Model.Bill.StartDate.HasValue ? Model.Bill.StartDate.Value.ToString("yyyy-MM-dd") : String.Empty;
    string endDateString = Model.Bill.EndDate.HasValue ? Model.Bill.EndDate.Value.ToString("yyyy-MM-dd") : String.Empty;
}

<h1>Edit</h1>

<h4>Charge</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="@Model.Bill.Id" />
            <div class="form-group">
                <label asp-for="@Model.Bill.ClientAccount.Name">Client: </label>
                <input asp-for="@Model.Bill.ClientAccount.Name" id="clientInput" class="form-control" title="Begin entering a client name, and a list of matching clients will appear." />
                <span asp-validation-for="@Model.Bill.ClientAccount.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="hidden" asp-for="@Model.Bill.ClientAccountId" id="clientIdInput" class="form-control" />
                <span asp-validation-for="@Model.Bill.ClientAccountId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.Title" class="control-label"></label>
                <input asp-for="@Model.Bill.Title" class="form-control" id="title" data-val-required="A project tile must be provided" />
                <span asp-validation-for="@Model.Bill.Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.IdirOrUrl" class="control-label"></label>
                <input asp-for="@Model.Bill.IdirOrUrl" class="form-control" />
                <span asp-validation-for="@Model.Bill.IdirOrUrl" class="text-danger"></span>
            </div>
            @await Component.InvokeAsync("ServiceCategoryInput", new { categories =  Model.Categories, bill = Model.Bill })
            <span asp-validation-for="@Model.Bill.ServiceCategoryId" class="text-danger"></span>
            <div class="form-group">
                <input type="hidden" asp-for="@Model.Bill.ServiceCategoryId" id="categoryIdInput" class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.Amount" class="control-label"></label>
                <input asp-for="@Model.Bill.Amount" class="form-control" id="amount"/>
                <span asp-validation-for="@Model.Bill.Amount" class="text-danger"></span>
                <div class="input-info">
                    Typically, amount is calculated based on service and quantity, and shouldn't be changed. It can be overridden here if you have a good reason to do so.
                </div>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.ServiceCategory.UOM">Unit of Measure </label>
                <input asp-for="@Model.Bill.ServiceCategory.UOM" class="form-control" readonly="true" />
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.MostRecentActiveFiscalPeriod.Period" class="control-label"></label>
                <input asp-for="@Model.Bill.MostRecentActiveFiscalPeriod.Period" class="form-control" readonly="true" data-val-required="Please provide a Fiscal Period" />
                <span asp-validation-for="@Model.Bill.MostRecentActiveFiscalPeriod.Period" class="text-danger"></span>
                 <input type="hidden" asp-for="@Model.Bill.CurrentFiscalPeriodId" />
            </div>
            <div class="form-group" title="For monthly charges, this is calculated based on the start date and end date (if provided). Clients are not charged for past months in a fiscal quarter. If a monthly charge is included in the following fiscal quarter, its quantity will be set to 3 (for each month in the quarter), unless an end date is set that is earlier than the end of the new quarter.">
                <label asp-for="@Model.Bill.Quantity" class="control-label"></label>
                <input asp-for="@Model.Bill.Quantity" class="form-control" id="quantity" data-val="true" data-val-required="A quantity must be provided" />
                <span asp-validation-for="@Model.Bill.Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.TicketNumberAndRequester" class="control-label"></label>
                <input asp-for="@Model.Bill.TicketNumberAndRequester" class="form-control" />
                <span asp-validation-for="@Model.Bill.TicketNumberAndRequester" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.StartDate" class="control-label"></label>
                <input asp-for="@Model.Bill.StartDate" class="form-control" type="date" id="startDate" value="@startDateString" />
                <span asp-validation-for="@Model.Bill.StartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.EndDate" class="control-label"></label>
                <input asp-for="@Model.Bill.EndDate" class="form-control" type="date" id="endDate" value="@endDateString" />
                <span asp-validation-for="@Model.Bill.EndDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.DateModified" class="control-label"></label>
                <input asp-for="@Model.Bill.DateModified" class="form-control" readonly="true" />
                <span asp-validation-for="@Model.Bill.DateModified" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.BillingCycle" class="control-label"></label>
                <input asp-for="@Model.Bill.BillingCycle" class="form-control" />
                <span asp-validation-for="@Model.Bill.BillingCycle" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Bill.CreatedBy" class="control-label"></label>
                <input asp-for="@Model.Bill.CreatedBy" class="form-control" />
                <span asp-validation-for="@Model.Bill.CreatedBy" class="text-danger"></span>
            </div>
            @if (Model.FiscalHistory != null && Model.FiscalHistory.PeriodId > 0)
            {
              <div class="form-group">
                  <input asp-for="@Model.FiscalHistory.Id" type="hidden"/>
                    <label asp-for="@Model.FiscalHistory.Notes" class="control-label">Notes for @Model.FiscalHistory?.FiscalPeriod?.Period </label>
                <textarea asp-for="@Model.FiscalHistory.Notes" class="form-control" value="@Model.FiscalHistory.Notes" > </textArea>
                <span asp-validation-for="@Model.FiscalHistory.Notes" class="text-danger"></span>
              </div>
            }
            else
            {
                <div class="form-group">
                    <label asp-for="@Model.Bill.Notes" class="control-label"></label>
                <textarea asp-for="@Model.Bill.Notes" class="form-control" value="@Model.Bill.Notes" > </textArea>
                <span asp-validation-for="@Model.Bill.Notes" class="text-danger"></span>
            </div>
            }
            <br />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {
            calculateAmount = (quantityChanged) => {
              console.log(quantityChanged);
                var url = '@Url.Action("GetBillAmount", "Bills")' + "?serviceId=" + $("#categorySelect").val() + "&quantity=" + $("#quantity").val() + "&startDate=" + $("#startDate").val() + "&endDate=" + $("#endDate").val() + "&quantityChanged=" + quantityChanged;
                var xhr = new XMLHttpRequest();
                xhr.responseType = "JSON";
                xhr.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        var response = JSON.parse(xhr.response);
                        $("#amount").val(response['amount']);
                        $("#Bill_ServiceCategory_UOM").val(response['uom']); // @Model.Bill.ServiceCategory.UOM
                        $("#quantity").val(response['quantity']);
                    }
                };
                xhr.open('get', url);
                xhr.send();
            }
            $("#categorySelect").on("change", (e) => {
                calculateAmount(false);
                if ($("#categorySelect").val() < 21) { //id's greater than 21 are older categories, with slightly different names and prices
                    $("#categoryWarning").hide();
                }
                    var id = $('#categorySelect').val();
                    $("#categoryIdInput").val(id);
            });
            $("#quantity").on("change", (e) => {
                calculateAmount(true);
            });
             $("#startDate").on("change", (e) => {
                calculateAmount(false);
            });
            $("#endDate").on("change", (e) => {
                calculateAmount(false);
            });

            createClientSelect = () => {
                var clientsMatchingSearch = [];
                var url = "../../Bills/GetClients";
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        clientsMatchingSearch = [];
                        var data = JSON.parse(xhr.response);

                        for (const client in data) {
                            clientsMatchingSearch.push({ label: data[client].name, "clientId": data[client].id });
                        }

                        $("#clientInput").autocomplete({
                            source: clientsMatchingSearch
                        });
                    }
                };
                xhr.open('get', url);
                xhr.send();

                $("#clientInput").autocomplete({
                    source: clientsMatchingSearch,
                    delay: 500,
                    select: function(event, ui){
                        $("#clientIdInput").val(ui.item.clientId);
                        $("#clientInput").text(ui.item.label);
                    },
                    minLength: 0
                });
            }
            createClientSelect();
        });
    </script>
}